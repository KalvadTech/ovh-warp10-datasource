{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","Warp10Datasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","lastErrors","options","backend","length","substr","method","data","headers","undefined","datasourceRequest","then","parseTemplatingResult","o","map","d","i","text","value","console","log","end","convertToWarp10Time","range","to","start","from","queries","each","targets","bind","target","expr","push","isEmpty","defer","resolve","promise","allQueryPromise","query","performTimeSeriesQuery","self","all","allResponse","result","response","index","entry","transformMetricData","filter","replace","refId","hide","warpscriptScript","prepareWarpscriptQuery","endISO","convertToISO","startISO","interval","variables","variable","tmp","current","isNaN","gts","isGts","className","c","labels","l","key","join","metricName","dps","v","Math","floor","datapoints","Array","splice","propertyIsEnumerable","a","date","parse","timestamp","Date","toISOString","roundUp","isMoment","isDate","time","mathString","parseString","substring","indexOf","ISO_8601","parseDateMath"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\n\nexport class Warp10Datasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.lastErrors = {};\n  }\n\n  // Optional\n  // Required for templating\n  metricFindQuery(options) {\n    \n    var backend = this.url;\n    while (backend[backend.length-1] === '/') {\n      // remove trailing slash\n      backend = backend.substr(0, backend.length - 1);\n    }\n    var url = backend + '/api/v0/exec';\n\n    var options = {\n      method: 'POST',\n      url: url,\n      data: options,\n      headers: {\n          'Accept': undefined,\n          'Content-Type': undefined\n      }\n    };\n    return this.backendSrv.datasourceRequest(options).then(this.parseTemplatingResult);\n  }\n  parseTemplatingResult(o) {\n     return _.map(o.data, (d, i) => {\n      return { text: d, value: i};\n    });\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n\n    console.log(\"Query begin\");\n\n    var end = this.convertToWarp10Time(options.range.to);\n    var start = this.convertToWarp10Time(options.range.from);\n    \n    console.log(\"From: \"+start+ \" To: \"+end);\n\n\n    var queries = [];\n\n    console.log(\"Before foreach\");\n\n    _.each(options.targets, _.bind(function(target) {\n\n      console.log(\"Expre\", target.expr);\n      console.log(\"Backend URL\", target.backend);\n\n      queries.push(target);\n    }, this));\n\n    console.log(\"After foreach\");\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n\n      console.log(\"Empty query\");\n\n      var d = this.q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    var allQueryPromise = _.map(queries, _.bind(function(query) {\n      return this.performTimeSeriesQuery(query, start, end);\n    }, this));\n\n    var self = this;\n    return this.q.all(allQueryPromise)\n      .then(function(allResponse) {\n        var result = [];\n\n        _.each(allResponse, function(response, index) {\n\n          console.log(\"Response\", response);\n          if (response.data.type === 'error') {\n            self.lastErrors.query = response.data.value;\n            throw response.data.value;\n          }\n          delete self.lastErrors.query;\n\n          /*if (!self.isArray(response.data) || (response.data.length !== 1)) {\n            console.log(\"Response isn't an Array or it has more than 1 element\", response.data);\n            return {};\n          }*/\n\n          //var warpscriptJsonResponse = response.data[0];\n          for (var entry of response.data) {\n            console.log(\"Response data\", entry);\n\n            \n            result.push(self.transformMetricData(entry, options.targets[index]));\n          }\n        });\n\n        return { data: result };\n      });\n  \n  }\n\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide,\n        expr: target.expr,\n        backend: target.backend\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  /* ******************************************************/\n  /* Puts into the Warpscript script a header to place \n  /* start and end ont the stacks\n  /* ******************************************************/\n  performTimeSeriesQuery(query, start, end) {\n\n    var warpscriptScript = this.prepareWarpscriptQuery(query, start, end);\n\n    var backend = this.url;\n    // If we have defined a backend in the query editor, it takes preecedence\n    // over the datasource\n    if ((query.backend !== undefined) && (query.backend.length >0)) {\n      backend = query.backend;\n    }\n\n    while (backend[backend.length-1] === '/') {\n      // remove trailing slash\n      backend = backend.substr(0, backend.length - 1);\n    }\n\n    var url = backend + '/api/v0/exec';\n\n    var options = {\n      method: 'POST',\n      url: url,\n      data: warpscriptScript,\n      headers: {\n          'Accept': undefined,\n          'Content-Type': undefined\n      }\n    };\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  /* ******************************************************/\n  /* Puts into the Warpscript script a header to place \n  /* start and end ont the stack\n  /* ******************************************************/\n  prepareWarpscriptQuery(query, start, end) {\n\n    var endISO = this.convertToISO(end);\n    var startISO = this.convertToISO(start);\n    var interval = end - start;\n\n    var warpscriptScript =\n          \" \" + start + \" 'start' STORE \" + end + \" 'end' STORE \" +\n          \"'\" + startISO + \"' 'startISO' STORE '\" + endISO + \"' 'endISO' STORE \" +\n          interval + \" 'interval' STORE\";\n    _.each(this.templateSrv.variables, function(variable) {\n      var tmp = variable.current.text;\n      if( isNaN(variable.current.text) ) {\n        // It's a string\n        tmp = \"'\" + variable.current.text + \"'\";\n      }\n      warpscriptScript += \"\\n\" + tmp + \" '\"+variable.name+\"' STORE\";\n    });\n    if (query.expr !== undefined) {\n      warpscriptScript += \" \" + query.expr;\n    }\n    return warpscriptScript;\n  }\n\n  /* ******************************************************/\n  /* Transform from Warpscript JSON to Grafana dps\n  /* ******************************************************/\n  transformMetricData(gts) {\n\n    if (!this.isGts(gts)) {\n      console.log(\"Response item isn't a gts\",gts);\n      return;\n    }\n\n    var className = gts.c;\n\n    var labels =\n      _.map(gts.l, function(value, key) {\n        return key+\"=\"+value;\n      }).join(\",\");\n\n    var metricName = className+\"{\"+labels+\"}\";\n    var dps = [];\n\n    _.each(gts.v, function(value) {\n      // Datapoint format: [ value, label]\n      dps.push([value[value.length -1], Math.floor(value[0]/1000)]);\n    });\n\n    // Metric format {target: \"Label text\", datapoints: [ datapoints objects] }\n\n    console.log({ target: metricName , datapoints: dps });\n    return { target: metricName, datapoints: dps };\n  }\n\n  /* ******************************************************/\n  /* Returns true if @value is an Array\n  /* ******************************************************/\n  isArray(value) {\n    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number'\n      && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));\n  }\n\n  /* ******************************************************/\n  /* Returns true if @gts is a JSON object version of a GTS\n  /* ******************************************************/\n  isGts(gts) {\n    if ((gts.c == null) || (gts.l == null) || (gts.a == null) || (gts.v == null)) {\n      return false;\n    }\n    return true;\n  }\n\n  /* ******************************************************/\n  /* Converts @date into µs since Epoch time \n  /* (Warpscript tick format) \n  /* ******************************************************/\n  convertToWarp10Time(date) {\n    date = this.parse(date);\n    return date * 1000;\n  }\n\n  /* ******************************************************/\n  /* Converts @timestamp into ISO 8601 format \n  /* ******************************************************/\n  convertToISO(timestamp) {\n    var date = new Date(Math.floor(timestamp/1000));\n    return date.toISOString();\n  }\n\n  parse(text, roundUp) {\n  if (!text) { return undefined; }\n  if (moment.isMoment(text)) { return text; }\n  if (_.isDate(text)) { return moment(text); }\n\n  var time;\n  var mathString = '';\n  var index;\n  var parseString;\n\n  if (text.substring(0, 3) === 'now') {\n    time = moment();\n    mathString = text.substring('now'.length);\n  } else {\n    index = text.indexOf('||');\n    if (index === -1) {\n      parseString = text;\n      mathString = ''; // nothing else\n    } else {\n      parseString = text.substring(0, index);\n      mathString = text.substring(index + 2);\n    }\n    // We're going to just require ISO8601 timestamps, k?\n    time = moment(parseString, moment.ISO_8601);\n  }\n\n  if (!mathString.length) {\n    return time;\n  }\n\n  return parseDateMath(mathString, time, roundUp);\n}\n\n}\n"]}