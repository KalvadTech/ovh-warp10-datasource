{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","Warp10Datasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","lastErrors","options","backend","length","substr","method","data","headers","undefined","datasourceRequest","then","parseTemplatingResult","o","map","d","i","text","value","console","log","end","convertToWarp10Time","range","to","start","from","queries","each","targets","bind","target","expr","push","isEmpty","defer","resolve","promise","allQueryPromise","query","performTimeSeriesQuery","self","all","allResponse","result","response","index","isArray","warpscriptJsonResponse","metricData","transformMetricData","filter","replace","refId","hide","warpscriptScript","prepareWarpscriptQuery","endISO","convertToISO","startISO","interval","variables","variable","tmp","current","isNaN","gts","isGts","className","c","labels","l","key","join","metricName","dps","v","Math","floor","datapoints","Array","splice","propertyIsEnumerable","a","date","parse","timestamp","Date","toISOString","roundUp","isMoment","isDate","time","mathString","parseString","substring","indexOf","ISO_8601","parseDateMath"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport class Warp10Datasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.lastErrors = {};\r\n  }\r\n\r\n  // Optional\r\n  // Required for templating\r\n  metricFindQuery(options) {\r\n    \r\n    var backend = this.url;\r\n    while (backend[backend.length-1] === '/') {\r\n      // remove trailing slash\r\n      backend = backend.substr(0, backend.length - 1);\r\n    }\r\n    var url = backend + '/api/v0/exec';\r\n\r\n    var options = {\r\n      method: 'POST',\r\n      url: url,\r\n      data: options,\r\n      headers: {\r\n          'Accept': undefined,\r\n          'Content-Type': undefined\r\n      }\r\n    };\r\n    return this.backendSrv.datasourceRequest(options).then(this.parseTemplatingResult);\r\n  }\r\n  parseTemplatingResult(o) {\r\n     return _.map(o.data, (d, i) => {\r\n      return { text: d, value: i};\r\n    });\r\n  }\r\n\r\n  // Called once per panel (graph)\r\n  query(options) {\r\n\r\n    console.log(\"Query begin\");\r\n\r\n    var end = this.convertToWarp10Time(options.range.to);\r\n    var start = this.convertToWarp10Time(options.range.from);\r\n    \r\n    console.log(\"From: \"+start+ \" To: \"+end);\r\n\r\n\r\n    var queries = [];\r\n\r\n    console.log(\"Before foreach\");\r\n\r\n    _.each(options.targets, _.bind(function(target) {\r\n\r\n      console.log(\"Expre\", target.expr);\r\n      console.log(\"Backend URL\", target.backend);\r\n\r\n      queries.push(target);\r\n    }, this));\r\n\r\n    console.log(\"After foreach\");\r\n\r\n    // No valid targets, return the empty result to save a round trip.\r\n    if (_.isEmpty(queries)) {\r\n\r\n      console.log(\"Empty query\");\r\n\r\n      var d = this.q.defer();\r\n      d.resolve({ data: [] });\r\n      return d.promise;\r\n    }\r\n\r\n    var allQueryPromise = _.map(queries, _.bind(function(query) {\r\n      return this.performTimeSeriesQuery(query, start, end);\r\n    }, this));\r\n\r\n    var self = this;\r\n    return this.q.all(allQueryPromise)\r\n      .then(function(allResponse) {\r\n        var result = [];\r\n\r\n        _.each(allResponse, function(response, index) {\r\n\r\n          console.log(\"Response\", response);\r\n          if (response.data.type === 'error') {\r\n            self.lastErrors.query = response.data.value;\r\n            throw response.data.value;\r\n          }\r\n          delete self.lastErrors.query;\r\n\r\n          if (!self.isArray(response.data) || (response.data.length !== 1)) {\r\n            console.log(\"Response isn't an Array or it has more than 1 element\", response.data);\r\n            return {};\r\n          }\r\n\r\n          var warpscriptJsonResponse = response.data[0];\r\n\r\n          console.log(\"Response data\", warpscriptJsonResponse);\r\n\r\n          _.each(warpscriptJsonResponse, function(metricData) {\r\n            console.log(\"Metric data\",metricData);\r\n\r\n            result.push(self.transformMetricData(metricData, options.targets[index]));\r\n          });\r\n        });\r\n\r\n        return { data: result };\r\n      });\r\n  \r\n  }\r\n\r\n\r\n  buildQueryParameters(options) {\r\n    //remove placeholder targets\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== 'select metric';\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(target.target),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        expr: target.expr,\r\n        backend: target.backend\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  /* ******************************************************/\r\n  /* Puts into the Warpscript script a header to place \r\n  /* start and end ont the stacks\r\n  /* ******************************************************/\r\n  performTimeSeriesQuery(query, start, end) {\r\n\r\n    var warpscriptScript = this.prepareWarpscriptQuery(query, start, end);\r\n\r\n    var backend = this.url;\r\n    // If we have defined a backend in the query editor, it takes preecedence\r\n    // over the datasource\r\n    if ((query.backend !== undefined) && (query.backend.length >0)) {\r\n      backend = query.backend;\r\n    }\r\n\r\n    while (backend[backend.length-1] === '/') {\r\n      // remove trailing slash\r\n      backend = backend.substr(0, backend.length - 1);\r\n    }\r\n\r\n    var url = backend + '/api/v0/exec';\r\n\r\n    var options = {\r\n      method: 'POST',\r\n      url: url,\r\n      data: warpscriptScript,\r\n      headers: {\r\n          'Accept': undefined,\r\n          'Content-Type': undefined\r\n      }\r\n    };\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  /* ******************************************************/\r\n  /* Puts into the Warpscript script a header to place \r\n  /* start and end ont the stack\r\n  /* ******************************************************/\r\n  prepareWarpscriptQuery(query, start, end) {\r\n\r\n    var endISO = this.convertToISO(end);\r\n    var startISO = this.convertToISO(start);\r\n    var interval = end - start;\r\n\r\n    var warpscriptScript =\r\n          \" \" + start + \" 'start' STORE \" + end + \" 'end' STORE \" +\r\n          \"'\" + startISO + \"' 'startISO' STORE '\" + endISO + \"' 'endISO' STORE \" +\r\n          interval + \" 'interval' STORE\";\r\n    _.each(this.templateSrv.variables, function(variable) {\r\n      var tmp = variable.current.value;\r\n      if( isNaN(variable.current.value) ) {\r\n        // It's a string\r\n        tmp = \"'\" + variable.current.value + \"'\";\r\n      }\r\n      warpscriptScript += \"\\n\" + tmp + \" '\"+variable.name+\"' STORE\";\r\n    });\r\n    if (query.expr !== undefined) {\r\n      warpscriptScript += \" \" + query.expr;\r\n    }\r\n    return warpscriptScript;\r\n  }\r\n\r\n  /* ******************************************************/\r\n  /* Transform from Warpscript JSON to Grafana dps\r\n  /* ******************************************************/\r\n  transformMetricData(gts) {\r\n\r\n    if (!this.isGts(gts)) {\r\n      console.log(\"Response item isn't a gts\",gts);\r\n      return;\r\n    }\r\n\r\n    var className = gts.c;\r\n\r\n    var labels =\r\n      _.map(gts.l, function(value, key) {\r\n        return key+\"=\"+value;\r\n      }).join(\",\");\r\n\r\n    var metricName = className+\"{\"+labels+\"}\";\r\n    var dps = [];\r\n\r\n    _.each(gts.v, function(value) {\r\n      // Datapoint format: [ value, label]\r\n      dps.push([value[value.length -1], Math.floor(value[0]/1000)]);\r\n    });\r\n\r\n    // Metric format {target: \"Label text\", datapoints: [ datapoints objects] }\r\n\r\n    console.log({ target: metricName , datapoints: dps });\r\n    return { target: metricName, datapoints: dps };\r\n  }\r\n\r\n  /* ******************************************************/\r\n  /* Returns true if @value is an Array\r\n  /* ******************************************************/\r\n  isArray(value) {\r\n    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number'\r\n      && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));\r\n  }\r\n\r\n  /* ******************************************************/\r\n  /* Returns true if @gts is a JSON object version of a GTS\r\n  /* ******************************************************/\r\n  isGts(gts) {\r\n    if ((gts.c == null) || (gts.l == null) || (gts.a == null) || (gts.v == null)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* ******************************************************/\r\n  /* Converts @date into µs since Epoch time \r\n  /* (Warpscript tick format) \r\n  /* ******************************************************/\r\n  convertToWarp10Time(date) {\r\n    date = this.parse(date);\r\n    return date * 1000;\r\n  }\r\n\r\n  /* ******************************************************/\r\n  /* Converts @timestamp into ISO 8601 format \r\n  /* ******************************************************/\r\n  convertToISO(timestamp) {\r\n    var date = new Date(Math.floor(timestamp/1000));\r\n    return date.toISOString();\r\n  }\r\n\r\n  parse(text, roundUp) {\r\n  if (!text) { return undefined; }\r\n  if (moment.isMoment(text)) { return text; }\r\n  if (_.isDate(text)) { return moment(text); }\r\n\r\n  var time;\r\n  var mathString = '';\r\n  var index;\r\n  var parseString;\r\n\r\n  if (text.substring(0, 3) === 'now') {\r\n    time = moment();\r\n    mathString = text.substring('now'.length);\r\n  } else {\r\n    index = text.indexOf('||');\r\n    if (index === -1) {\r\n      parseString = text;\r\n      mathString = ''; // nothing else\r\n    } else {\r\n      parseString = text.substring(0, index);\r\n      mathString = text.substring(index + 2);\r\n    }\r\n    // We're going to just require ISO8601 timestamps, k?\r\n    time = moment(parseString, moment.ISO_8601);\r\n  }\r\n\r\n  if (!mathString.length) {\r\n    return time;\r\n  }\r\n\r\n  return parseDateMath(mathString, time, roundUp);\r\n}\r\n\r\n}\r\n"]}