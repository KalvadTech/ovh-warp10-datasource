{"version":3,"sources":["../src/datasource.js"],"names":["moment","Warp10Datasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","lastErrors","options","backend","length","substr","console","debug","variables","forEach","variable","isNaN","current","value","replace","RegExp","method","data","headers","undefined","datasourceRequest","then","parseTemplatingResult","o","map","indice","text","toString","res","status","message","title","catch","err","end","convertToWarp10Time","range","to","start","from","queries","targets","target","expr","push","d","defer","resolve","promise","allQueryPromise","query","performTimeSeriesQuery","self","all","allResponse","result","response","index","isArray","warpscriptJsonResponse","metricData","transformMetricData","annotation","error","gts","tags","label","l","annotations","v","dp","enabled","datasource","c","time","Math","trunc","join","de","filter","refId","hide","warpscriptScript","prepareWarpscriptQuery","endISO","convertToISO","startISO","interval","tmp","isGts","className","labels","key","metricName","dps","floor","datapoints","Array","splice","propertyIsEnumerable","a","date","parse","timestamp","Date","toISOString","roundUp","isMoment","Object","prototype","call","mathString","parseString","substring","indexOf","ISO_8601","parseDateMath"],"mappings":"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","file":"datasource.js","sourcesContent":["import moment from 'moment';\nimport './css/app.css!';\n\nexport class Warp10Datasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.lastErrors = {};\n  }\n\n  // Optional\n  // Required for templating\n  metricFindQuery(options) {\n    var backend = this.url;\n    while (backend[backend.length-1] === '/') {\n      // remove trailing slash\n      backend = backend.substr(0, backend.length - 1);\n    }\n    var url = backend + '/api/v0/exec';\n\n    console.debug(this.templateSrv);\n    this.templateSrv.variables.forEach((variable) => {\n      if (isNaN(variable.current.value)) {\n        options = options.replace(new RegExp('\\\\$' + variable.name, 'g'), '\\'$' + variable.name + '\\'');\n      }\n    });\n    options = this.templateSrv.replace(options, null, 'regex');\n\n    options = {\n      method: 'POST',\n      url: url,\n      data: options,\n      headers: {\n          'Accept': undefined,\n          'Content-Type': undefined,\n      },\n    };\n    return this.backendSrv.datasourceRequest(options).then(this.parseTemplatingResult);\n  }\n\n  parseTemplatingResult(o) {\n    console.debug('tesmplating result', o);\n    return o.data.map((data, indice) => {\n      return {text: data.toString() || indice, value: data};\n    });\n  }\n\n  // Used by Grafana to test a Datasource when one is added\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v0/exec',\n      method: 'POST',\n      data: '1 2 +',\n      headers: {\n          'Accept': undefined,\n          'Content-Type': undefined,\n      },\n    })\n    .then((res) => {\n      if (res.status != 200) {\n        return {\n          status: 'error',\n          message: 'Not a 200 receivend from server',\n          title: 'Error',\n        };\n      }\n      if (res.data[0] != 3) {\n        return {\n          status: 'error',\n          message: 'Can\\'t execute test WarpScript: \\'1 2 +\\'not equals to ' + res.data,\n          title: 'Success',\n        };\n      }\n      return {\n        status: 'success',\n        message: 'Datasource is working',\n        title: 'Success',\n      };\n    })\n    .catch((res) => {\n      return {\n        status: 'error',\n        message: res.err,\n        title: 'Failed to contact server',\n      };\n    });\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    console.debug('[grafana-warp10-datasource] Query begin', options);\n\n    var end = this.convertToWarp10Time(options.range.to);\n    var start = this.convertToWarp10Time(options.range.from);\n\n    console.debug('[grafana-warp10-datasource] From: '+start+ ' To: '+end);\n\n\n    var queries = [];\n\n    console.debug('[grafana-warp10-datasource] Before foreach');\n\n    if (options.targets) {\n      options.targets.forEach((target) => {\n        console.debug('[grafana-warp10-datasource] Expr', target.expr);\n        console.debug('[grafana-warp10-datasource] Backend URL', target.backend);\n        queries.push(target);\n      });\n    }\n\n    console.debug('[grafana-warp10-datasource] After foreach');\n\n    // No valid targets, return the empty result to save a round trip.\n\n    if (!queries || queries.length == 0) {\n      console.debug('[grafana-warp10-datasource] Empty query');\n\n      var d = this.q.defer();\n      d.resolve({data: []});\n      return d.promise;\n    }\n\n    var allQueryPromise = queries.map( (query) => {\n      return this.performTimeSeriesQuery(query, start, end);\n    });\n\n    var self = this;\n    return this.q.all(allQueryPromise)\n      .then(function(allResponse) {\n        var result = [];\n\n        allResponse.forEach( (response, index) => {\n          console.debug('[grafana-warp10-datasource] Response', response);\n          if (response.data.type === 'error') {\n            self.lastErrors.query = response.data.value;\n            throw response.data.value;\n          }\n          delete self.lastErrors.query;\n\n          if (!self.isArray(response.data) || (response.data.length !== 1)) {\n            console.debug('[grafana-warp10-datasource] Response isn\\'t an Array or it has more than 1 element', response.data);\n            return {};\n          }\n\n          var warpscriptJsonResponse = response.data[0];\n          warpscriptJsonResponse.forEach((metricData) => {\n            console.debug('[grafana-warp10-datasource] Metric data', metricData);\n            result.push(self.transformMetricData(metricData, options.targets[index]));\n          });\n        });\n\n        return {data: result};\n      });\n  }\n\n  // Used by Grafana for Dashboard annotations\n  annotationQuery(options) {\n    var end = this.convertToWarp10Time(options.range.to);\n    var start = this.convertToWarp10Time(options.range.from);\n\n    return this.performTimeSeriesQuery({\n      expr: options.annotation.query,\n    }, start, end)\n    .then((res) => {\n      if (res.data.length != 1 || typeof res.data[0] != 'object') {\n        console.error('Annotation query must return exactly 1 GeoTimeSerie, current stack is:', res.data);\n        return [];\n      }\n      let gts = res.data[0];\n      console.debug('GTS', gts);\n      let tags = [];\n      for (let label in gts.l) {\n        tags.push(label+':'+gts.l[label]);\n      }\n\n      let annotations = [];\n\n      for (let dp of gts.v) {\n        annotations.push({\n          annotation: {\n            name: options.annotation.name,\n            enabled: true,\n            datasource: this.name,\n          },\n          title: gts.c,\n          time: Math.trunc(dp[0] / 1000),\n          text: dp[1],\n          tags: (tags.length > 0) ? tags.join(',') : null,\n        });\n      }\n      console.de;\n      return annotations;\n    })\n    .catch((err) => {\n      console.error('Failed to retrieve annotations', err, options);\n      return [];\n    });\n  }\n\n  buildQueryParameters(options) {\n    // remove placeholder targets\n    options.targets = options.targets.filter((target) => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = options.targets.map((target) => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide,\n        expr: target.expr,\n        backend: target.backend,\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  /* ******************************************************/\n  /* Puts into the Warpscript script a header to place\n  /* start and end ont the stacks\n  /* ******************************************************/\n  performTimeSeriesQuery(query, start, end) {\n    var warpscriptScript = this.prepareWarpscriptQuery(query, start, end);\n\n    var backend = this.url;\n    // If we have defined a backend in the query editor, it takes preecedence\n    // over the datasource\n    if ((query.backend !== undefined) && (query.backend.length >0)) {\n      backend = query.backend;\n    }\n\n    while (backend[backend.length-1] === '/') {\n      // remove trailing slash\n      backend = backend.substr(0, backend.length - 1);\n    }\n\n    var url = backend + '/api/v0/exec';\n\n    var options = {\n      method: 'POST',\n      url: url,\n      data: warpscriptScript,\n      headers: {\n          'Accept': undefined,\n          'Content-Type': undefined,\n      },\n    };\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  /* ******************************************************/\n  /* Puts into the Warpscript script a header to place\n  /* start and end ont the stack\n  /* ******************************************************/\n  prepareWarpscriptQuery(query, start, end) {\n    var endISO = this.convertToISO(end);\n    var startISO = this.convertToISO(start);\n    var interval = end - start;\n\n    var warpscriptScript =\n          ' ' + start + ' \\'start\\' STORE ' + end + ' \\'end\\' STORE ' +\n          '\\'' + startISO + '\\' \\'startISO\\' STORE \\'' + endISO + '\\' \\'endISO\\' STORE ' +\n          interval + ' \\'interval\\' STORE';\n\n    for (let variable of this.templateSrv.variables) {\n      var tmp = variable.current.text;\n      if ( isNaN(variable.current.text) ) {\n        // It's a string\n        tmp = '\\'' + variable.current.text + '\\'';\n      }\n      warpscriptScript += '\\n' + tmp + ' \\''+variable.name+'\\' STORE';\n    }\n    if (query.expr !== undefined) {\n      warpscriptScript += ' ' + query.expr;\n    }\n    return warpscriptScript;\n  }\n\n  /* ******************************************************/\n  /* Transform from Warpscript JSON to Grafana dps\n  /* ******************************************************/\n  transformMetricData(gts) {\n    if ( typeof gts == 'object') {\n        return gts;\n    }\n    if (!this.isGts(gts)) {\n      console.debug('[grafana-warp10-datasource] Response item isn\\'t a gts', gts);\n      return;\n    }\n\n    var className = gts.c;\n\n    var labels = gts.l.map((value, key) => {\n        return key+'='+value;\n      }).join(',');\n\n    var metricName = className+'{'+labels+'}';\n    var dps = [];\n\n    gts.v.forEach((value) => {\n      // Datapoint format: [ value, label]\n      dps.push([value[value.length -1], Math.floor(value[0]/1000)]);\n    });\n\n    // Metric format {target: \"Label text\", datapoints: [ datapoints objects] }\n\n    console.debug({target: metricName, datapoints: dps});\n    return {target: metricName, datapoints: dps};\n  }\n\n  /* ******************************************************/\n  /* Returns true if @value is an Array\n  /* ******************************************************/\n  isArray(value) {\n    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number'\n      && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));\n  }\n\n  /* ******************************************************/\n  /* Returns true if @gts is a JSON object version of a GTS\n  /* ******************************************************/\n  isGts(gts) {\n    if ((gts.c == null) || (gts.l == null) || (gts.a == null) || (gts.v == null)) {\n      return false;\n    }\n    return true;\n  }\n\n  /* ******************************************************/\n  /* Converts @date into µs since Epoch time\n  /* (Warpscript tick format)\n  /* ******************************************************/\n  convertToWarp10Time(date) {\n    date = this.parse(date);\n    return date * 1000;\n  }\n\n  /* ******************************************************/\n  /* Converts @timestamp into ISO 8601 format\n  /* ******************************************************/\n  convertToISO(timestamp) {\n    var date = new Date(Math.floor(timestamp/1000));\n    return date.toISOString();\n  }\n\n  parse(text, roundUp) {\n    if (!text) { return undefined; }\n    if (moment.isMoment(text)) { return text; }\n    if (Object.prototype.toString.call(text) === '[object Date]') { return moment(text); }\n\n    var time;\n    var mathString = '';\n    var index;\n    var parseString;\n\n    if (text.substring(0, 3) === 'now') {\n      time = moment();\n      mathString = text.substring('now'.length);\n    } else {\n      index = text.indexOf('||');\n      if (index === -1) {\n        parseString = text;\n        mathString = ''; // nothing else\n      } else {\n        parseString = text.substring(0, index);\n        mathString = text.substring(index + 2);\n      }\n      // We're going to just require ISO8601 timestamps, k?\n      time = moment(parseString, moment.ISO_8601);\n    }\n\n    if (!mathString.length) {\n      return time;\n    }\n\n    return parseDateMath(mathString, time, roundUp);\n  }\n}\n"]}