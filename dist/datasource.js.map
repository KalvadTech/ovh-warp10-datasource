{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","Warp10Datasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","lastErrors","options","console","log","end","convertToWarp10Time","range","to","start","from","queries","each","targets","bind","target","expr","backend","push","isEmpty","d","defer","resolve","data","promise","allQueryPromise","map","query","performTimeSeriesQuery","self","all","then","allResponse","result","response","index","value","isArray","length","warpscriptJsonResponse","metricData","transformMetricData","filter","replace","refId","hide","warpscriptScript","prepareWarpscriptQuery","undefined","substr","method","headers","datasourceRequest","endISO","convertToISO","startISO","interval","variables","variable","current","gts","isGts","className","c","labels","l","key","join","metricName","dps","v","Math","floor","datapoints","Array","splice","propertyIsEnumerable","a","date","parse","timestamp","Date","toISOString","text","roundUp","isMoment","isDate","time","mathString","parseString","substring","indexOf","ISO_8601","parseDateMath"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\n\nexport class Warp10Datasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.lastErrors = {};\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n\n    console.log(\"Query begin\");\n\n    var end = this.convertToWarp10Time(options.range.to);\n    var start = this.convertToWarp10Time(options.range.from);\n    \n    console.log(\"From: \"+start+ \" To: \"+end);\n\n\n    var queries = [];\n\n    console.log(\"Before foreach\");\n\n    _.each(options.targets, _.bind(function(target) {\n\n      console.log(\"Expre\", target.expr);\n      console.log(\"Backend URL\", target.backend);\n\n      queries.push(target);\n    }, this));\n\n    console.log(\"After foreach\");\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n\n      console.log(\"Empty query\");\n\n      var d = this.q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    var allQueryPromise = _.map(queries, _.bind(function(query) {\n      return this.performTimeSeriesQuery(query, start, end);\n    }, this));\n\n    var self = this;\n    return this.q.all(allQueryPromise)\n      .then(function(allResponse) {\n        var result = [];\n\n        _.each(allResponse, function(response, index) {\n\n          console.log(\"Response\", response);\n          if (response.data.type === 'error') {\n            self.lastErrors.query = response.data.value;\n            throw response.data.value;\n          }\n          delete self.lastErrors.query;\n\n          if (!self.isArray(response.data) || (response.data.length !== 1)) {\n            console.log(\"Response isn't an Array or it has more than 1 element\", response.data);\n            return {};\n          }\n\n          var warpscriptJsonResponse = response.data[0];\n\n          console.log(\"Response data\", warpscriptJsonResponse);\n\n          _.each(warpscriptJsonResponse, function(metricData) {\n            console.log(\"Metric data\",metricData);\n\n            result.push(self.transformMetricData(metricData, options.targets[index]));\n          });\n        });\n\n        return { data: result };\n      });\n  \n  }\n\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide,\n        expr: target.expr,\n        backend: target.backend\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  /* ******************************************************/\n  /* Puts into the Warpscript script a header to place \n  /* start and end ont the stacks\n  /* ******************************************************/\n  performTimeSeriesQuery(query, start, end) {\n\n    var warpscriptScript = this.prepareWarpscriptQuery(query, start, end);\n\n    var backend = this.url;\n    // If we have defined a backend in the query editor, it takes preecedence\n    // over the datasource\n    if ((query.backend !== undefined) && (query.backend.length >0)) {\n      backend = query.backend;\n    }\n\n    while (backend[backend.length-1] === '/') {\n      // remove trailing slash\n      backend = backend.substr(0, backend.length - 1);\n    }\n\n    var url = backend + '/api/v0/exec';\n\n    var options = {\n      method: 'POST',\n      url: url,\n      data: warpscriptScript,\n      headers: {\n          'Accept': undefined,\n          'Content-Type': undefined\n      }\n    };\n\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  /* ******************************************************/\n  /* Puts into the Warpscript script a header to place \n  /* start and end ont the stack\n  /* ******************************************************/\n  prepareWarpscriptQuery(query, start, end) {\n\n    var endISO = this.convertToISO(end);\n    var startISO = this.convertToISO(start);\n    var interval = end - start;\n\n    var warpscriptScript =\n          \" \" + start + \" 'start' STORE \" + end + \" 'end' STORE \" +\n          \"'\" + startISO + \"' 'startISO' STORE '\" + endISO + \"' 'endISO' STORE \" +\n          interval + \" 'interval' STORE\";\n    _.each(this.templateSrv.variables, function(variable) {\n      warpscriptScript += \"\\n'\" + variable.current.value + \"' '\"+variable.name+\"' STORE\";\n    });\n    if (query.expr !== undefined) {\n      warpscriptScript += \" \" + query.expr;\n    }\n    return warpscriptScript;\n  }\n\n  /* ******************************************************/\n  /* Transform from Warpscript JSON to Grafana dps\n  /* ******************************************************/\n  transformMetricData(gts) {\n\n    if (!this.isGts(gts)) {\n      console.log(\"Response item isn't a gts\",gts);\n      return;\n    }\n\n    var className = gts.c;\n\n    var labels =\n      _.map(gts.l, function(value, key) {\n        return key+\"=\"+value;\n      }).join(\",\");\n\n    var metricName = className+\"{\"+labels+\"}\";\n    var dps = [];\n\n    _.each(gts.v, function(value) {\n      // Datapoint format: [ value, label]\n      dps.push([value[value.length -1], Math.floor(value[0]/1000)]);\n    });\n\n    // Metric format {target: \"Label text\", datapoints: [ datapoints objects] }\n\n    console.log({ target: metricName , datapoints: dps });\n    return { target: metricName, datapoints: dps };\n  }\n\n  /* ******************************************************/\n  /* Returns true if @value is an Array\n  /* ******************************************************/\n  isArray(value) {\n    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number'\n      && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));\n  }\n\n  /* ******************************************************/\n  /* Returns true if @gts is a JSON object version of a GTS\n  /* ******************************************************/\n  isGts(gts) {\n    if ((gts.c == null) || (gts.l == null) || (gts.a == null) || (gts.v == null)) {\n      return false;\n    }\n    return true;\n  }\n\n  /* ******************************************************/\n  /* Converts @date into µs since Epoch time \n  /* (Warpscript tick format) \n  /* ******************************************************/\n  convertToWarp10Time(date) {\n    date = this.parse(date);\n    return date * 1000;\n  }\n\n  /* ******************************************************/\n  /* Converts @timestamp into ISO 8601 format \n  /* ******************************************************/\n  convertToISO(timestamp) {\n    var date = new Date(Math.floor(timestamp/1000));\n    return date.toISOString();\n  }\n\n  parse(text, roundUp) {\n  if (!text) { return undefined; }\n  if (moment.isMoment(text)) { return text; }\n  if (_.isDate(text)) { return moment(text); }\n\n  var time;\n  var mathString = '';\n  var index;\n  var parseString;\n\n  if (text.substring(0, 3) === 'now') {\n    time = moment();\n    mathString = text.substring('now'.length);\n  } else {\n    index = text.indexOf('||');\n    if (index === -1) {\n      parseString = text;\n      mathString = ''; // nothing else\n    } else {\n      parseString = text.substring(0, index);\n      mathString = text.substring(index + 2);\n    }\n    // We're going to just require ISO8601 timestamps, k?\n    time = moment(parseString, moment.ISO_8601);\n  }\n\n  if (!mathString.length) {\n    return time;\n  }\n\n  return parseDateMath(mathString, time, roundUp);\n}\n\n}\n"]}