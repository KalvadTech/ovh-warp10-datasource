{"version":3,"sources":["../src/query-controller.js"],"names":["QueryCtrl","Warp10DatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","System","import","then","editor","textAreaID","Math","trunc","random","expr","console","log","Editor","datasource","metricFindQuery","transformToSegments","rawQuery","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;2CAEKC,yB;;;AACX,2CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA6C;AAAA;;AAAA,4JACrCF,MADqC,EAC7BC,SAD6B;;AAE3C,gBAAKE,KAAL,GAAaH,MAAb;AACA,gBAAKE,YAAL,GAAoBA,YAApB;AACA,gBAAKE,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;;AAEAC,iBAAOC,MAAP,CAAc,qDAAd,EACCC,IADD,CACO,UAACC,MAAD,EAAY;AACjB;AACA,kBAAKL,KAAL,CAAWM,UAAX,GAAwBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,KAA3B,CAAxB;AACA,kBAAKH,UAAL,GAAkBT,OAAOS,UAAzB;;AAEA,gBAAI,CAAC,MAAKL,MAAL,CAAYS,IAAjB,EAAuB,MAAKT,MAAL,CAAYS,IAAZ,GAAmB,EAAnB;;AAEvBC,oBAAQC,GAAR,CAAY,oCAAZ,EAAkDP,MAAlD;AACA;AACA,kBAAKA,MAAL,GAAcA,OAAOQ,MAArB;AACA,kBAAKR,MAAL;AACD,WAZD;AAN2C;AAmB5C;;;;uCAEY;AACX,mBAAO,KAAKS,UAAL,CAAgBC,eAAhB,CAAgC,KAAKd,MAArC,EACJG,IADI,CACC,KAAKL,YAAL,CAAkBiB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;6CAEkB;AACjB,iBAAKf,MAAL,CAAYgB,QAAZ,GAAuB,CAAC,KAAKhB,MAAL,CAAYgB,QAApC;AACD;;;6CAEkB;AACjB,iBAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;;QAlC4CxB,S;;;;AAoC/CC,gCAA0BwB,WAA1B,GAAwC,8BAAxC","file":"query-controller.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\n\nexport class Warp10DatasourceQueryCtrl extends QueryCtrl {\n  constructor($scope, $injector, uiSegmentSrv) {\n    super($scope, $injector);\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target.target = this.target.target || 'select metric';\n\n    System.import('/public/plugins/grafana-warp10-datasource/editor.js')\n    .then( (editor) => {\n      // set a random ID\n      this.scope.textAreaID = Math.trunc(Math.random() * 10000);\n      this.textAreaID = $scope.textAreaID;\n\n      if (!this.target.expr) this.target.expr = '';\n\n      console.log('[grafana-warp10-datasource] EDITOR', editor);\n      // send controler to Ace\n      this.editor = editor.Editor;\n      this.editor(this);\n    });\n  }\n\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\nWarp10DatasourceQueryCtrl.templateUrl = './partials/query.editor.html';\n"]}